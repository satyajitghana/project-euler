{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Euler - Home # Hey \ud83d\udc4b there, This is the documentation for my cute little project euler solutions repository, i'll try to update the repository with my solutions and maybe even try to explain my solutions. Please use the search bar to search your problem number or the title of the problem Head over to Solutions ! Happy Coding \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb My Progress #","title":"Project Euler - Home"},{"location":"#project-euler-home","text":"Hey \ud83d\udc4b there, This is the documentation for my cute little project euler solutions repository, i'll try to update the repository with my solutions and maybe even try to explain my solutions. Please use the search bar to search your problem number or the title of the problem Head over to Solutions ! Happy Coding \ud83d\udc69\u200d\ud83d\udcbb\ud83d\udc68\u200d\ud83d\udcbb","title":"Project Euler - Home"},{"location":"#my-progress","text":"","title":"My Progress"},{"location":"about/","text":"About # \"Project Euler exists to encourage, challenge, and develop the skills and enjoyment of anyone with an interest in the fascinating world of mathematics.\"","title":"About"},{"location":"about/#about","text":"\"Project Euler exists to encourage, challenge, and develop the skills and enjoyment of anyone with an interest in the fascinating world of mathematics.\"","title":"About"},{"location":"solutions/","text":"Solutions # Problem 001 # Problem 002 # Problem 003 # Problem 004 # Problem 005 # Problem 006 # Problem 007 # Problem 008 # Problem 009 # Problem 010 # Problem 011 # Problem 012 # Problem 013 # Problem 014 # Problem 015 # Problem 016 # Problem 017 # Problem 018 # Problem 020 # Problem 022 # Problem 023 # Problem 025 # Problem 026 # Problem 028 # Problem 029 # Problem 031 # Problem 034 # Problem 038 # Problem 048 # Problem 057 # Problem 079 # Problem 080 # Problem 081 # Problem 085 # Problem 109 # Problem 206 #","title":"Solutions"},{"location":"solutions/#solutions","text":"","title":"Solutions"},{"location":"solutions/#problem-001","text":"","title":"Problem 001"},{"location":"solutions/#problem-002","text":"","title":"Problem 002"},{"location":"solutions/#problem-003","text":"","title":"Problem 003"},{"location":"solutions/#problem-004","text":"","title":"Problem 004"},{"location":"solutions/#problem-005","text":"","title":"Problem 005"},{"location":"solutions/#problem-006","text":"","title":"Problem 006"},{"location":"solutions/#problem-007","text":"","title":"Problem 007"},{"location":"solutions/#problem-008","text":"","title":"Problem 008"},{"location":"solutions/#problem-009","text":"","title":"Problem 009"},{"location":"solutions/#problem-010","text":"","title":"Problem 010"},{"location":"solutions/#problem-011","text":"","title":"Problem 011"},{"location":"solutions/#problem-012","text":"","title":"Problem 012"},{"location":"solutions/#problem-013","text":"","title":"Problem 013"},{"location":"solutions/#problem-014","text":"","title":"Problem 014"},{"location":"solutions/#problem-015","text":"","title":"Problem 015"},{"location":"solutions/#problem-016","text":"","title":"Problem 016"},{"location":"solutions/#problem-017","text":"","title":"Problem 017"},{"location":"solutions/#problem-018","text":"","title":"Problem 018"},{"location":"solutions/#problem-020","text":"","title":"Problem 020"},{"location":"solutions/#problem-022","text":"","title":"Problem 022"},{"location":"solutions/#problem-023","text":"","title":"Problem 023"},{"location":"solutions/#problem-025","text":"","title":"Problem 025"},{"location":"solutions/#problem-026","text":"","title":"Problem 026"},{"location":"solutions/#problem-028","text":"","title":"Problem 028"},{"location":"solutions/#problem-029","text":"","title":"Problem 029"},{"location":"solutions/#problem-031","text":"","title":"Problem 031"},{"location":"solutions/#problem-034","text":"","title":"Problem 034"},{"location":"solutions/#problem-038","text":"","title":"Problem 038"},{"location":"solutions/#problem-048","text":"","title":"Problem 048"},{"location":"solutions/#problem-057","text":"","title":"Problem 057"},{"location":"solutions/#problem-079","text":"","title":"Problem 079"},{"location":"solutions/#problem-080","text":"","title":"Problem 080"},{"location":"solutions/#problem-081","text":"","title":"Problem 081"},{"location":"solutions/#problem-085","text":"","title":"Problem 085"},{"location":"solutions/#problem-109","text":"","title":"Problem 109"},{"location":"solutions/#problem-206","text":"","title":"Problem 206"},{"location":"problem-001/","text":"Multiples of 3 and 5 # #include<bits/stdc++.h> int main() { int sum = 0; for (int i = 1 ; i < 1000 ; i++) { if (i % 3 == 0 || i % 5 == 0) { sum += i; } } printf(\"%d\\n\", sum); return 0; } OUTPUT 233168","title":"Multiples of 3 and 5"},{"location":"problem-001/#multiples-of-3-and-5","text":"#include<bits/stdc++.h> int main() { int sum = 0; for (int i = 1 ; i < 1000 ; i++) { if (i % 3 == 0 || i % 5 == 0) { sum += i; } } printf(\"%d\\n\", sum); return 0; } OUTPUT 233168","title":"Multiples of 3 and 5"},{"location":"problem-002/","text":"Even Fibonacci numbers # def solution(): x = 1 # Represents the current Fibonacci number being processed y = 2 # Represents the next Fibonacci number in the sequence ans = 0 while x <= 4000000: if x % 2 == 0: ans += x x, y = y, x + y return ans OUTPUT 4613732","title":"Even Fibonacci numbers"},{"location":"problem-002/#even-fibonacci-numbers","text":"def solution(): x = 1 # Represents the current Fibonacci number being processed y = 2 # Represents the next Fibonacci number in the sequence ans = 0 while x <= 4000000: if x % 2 == 0: ans += x x, y = y, x + y return ans OUTPUT 4613732","title":"Even Fibonacci numbers"},{"location":"problem-003/","text":"Largest prime facror of 600851475143 # import math def prime_factors(n): result = [0] while n % 2 == 0: result.append[2] n = n / 2 for i in range(3,int(math.sqrt(n))+1,2): while n % i== 0: result.append(i) n = n / i if n > 2: result.append(n) return result[-1] n = int(input()) print(prime_factors(n)) INPUT 600851475143 OUTPUT 6857","title":"Largest prime facror of 600851475143"},{"location":"problem-003/#largest-prime-facror-of-600851475143","text":"import math def prime_factors(n): result = [0] while n % 2 == 0: result.append[2] n = n / 2 for i in range(3,int(math.sqrt(n))+1,2): while n % i== 0: result.append(i) n = n / i if n > 2: result.append(n) return result[-1] n = int(input()) print(prime_factors(n)) INPUT 600851475143 OUTPUT 6857","title":"Largest prime facror of 600851475143"},{"location":"problem-004/","text":"Largest Palindrome Product # def is_palindrome(num): num_as_str = str(num) len_of_num = len(num_as_str) for i in range(len_of_num / 2): if num_as_str[i] != num_as_str[len_of_num - 1 - i]: return False return True def solution(): products = [] for factor1 in range(999, 99, -1): for factor2 in range(999, 99, -1): product = factor1 * factor2 if is_palindrome(product): products.append(product) return max(products) OUTPUT 906609","title":"Largest Palindrome Product"},{"location":"problem-004/#largest-palindrome-product","text":"def is_palindrome(num): num_as_str = str(num) len_of_num = len(num_as_str) for i in range(len_of_num / 2): if num_as_str[i] != num_as_str[len_of_num - 1 - i]: return False return True def solution(): products = [] for factor1 in range(999, 99, -1): for factor2 in range(999, 99, -1): product = factor1 * factor2 if is_palindrome(product): products.append(product) return max(products) OUTPUT 906609","title":"Largest Palindrome Product"},{"location":"problem-005/","text":"Smallest number evenly divisible by numbers from 1 to 20 # import math def divisible_from_1_to_n(n): number = 1 for i in range(1, n + 1): number = int((number * i)/math.gcd(number, i)) return number n = int(input()) print (divisible_from_1_to_n(n)) INPUT 20 OUTPUT 232792560","title":"Smallest number evenly divisible by numbers from 1 to 20"},{"location":"problem-005/#smallest-number-evenly-divisible-by-numbers-from-1-to-20","text":"import math def divisible_from_1_to_n(n): number = 1 for i in range(1, n + 1): number = int((number * i)/math.gcd(number, i)) return number n = int(input()) print (divisible_from_1_to_n(n)) INPUT 20 OUTPUT 232792560","title":"Smallest number evenly divisible by numbers from 1 to 20"},{"location":"problem-006/","text":"Sum Square Difference # Need to find : difference between (1 + 2 + 3 + .. + n)^2 - (1^2 + 2^2 + 3^2 + ... + n^2) for n = 100 t1 is (1 + 2 + 3 + .. + n)^2 1 + 2 + ... + n is n(n+1)/2. Squaring it will give (n 4 + n 2 + 2 (n *3))/4 t2 is (1^2 + 2^2 + 3^2 + ... + n^2). Sum of n^2 is (n (n+1) (2*n+1))/6 putting n = 100 gives the desired answer n = 100 t1 = 0.25*(n**4 + n**2 + 2*(n**3)) t2 = (n*(n+1)*(2*n+1))/6 print(int(t1-t2)) Output 25164150","title":"Sum Square Difference"},{"location":"problem-006/#sum-square-difference","text":"Need to find : difference between (1 + 2 + 3 + .. + n)^2 - (1^2 + 2^2 + 3^2 + ... + n^2) for n = 100 t1 is (1 + 2 + 3 + .. + n)^2 1 + 2 + ... + n is n(n+1)/2. Squaring it will give (n 4 + n 2 + 2 (n *3))/4 t2 is (1^2 + 2^2 + 3^2 + ... + n^2). Sum of n^2 is (n (n+1) (2*n+1))/6 putting n = 100 gives the desired answer n = 100 t1 = 0.25*(n**4 + n**2 + 2*(n**3)) t2 = (n*(n+1)*(2*n+1))/6 print(int(t1-t2)) Output 25164150","title":"Sum Square Difference"},{"location":"problem-007/","text":"10001st Prime # package main import ( \"fmt\" \"math/big\" ) func firstNPrime(n int) int { var nPrime int = 0 for i := 2; n != 0; i++ { if big.NewInt(int64(i)).ProbablyPrime(0) { nPrime = i n-- } } return nPrime } func main() { fmt.Println(firstNPrime(10001)) } OUTPUT 104743 Python Solutions by Yogisam72 # Solution 1 # import time prime = [2] index = 10001 prime_numbers_array_length = 1 t0 = time.time() i = 3 while prime_numbers_array_length != index: flag = 1 for j in prime[:round(prime_numbers_array_length**0.5)]: if i%j == 0: flag = 0 break if flag == 1: prime.append(i) prime_numbers_array_length = len(prime) i += 2 print(\"10001st prime number is:\",prime[-1]) t1 = time.time() print(\"Time required:\", t1 - t0) OUTPUT 10001st prime number is: 104743 Time required: 0.1237955093383789 Solution 2 # import time def SieveOfEratosthenes(n): prime = [True for i in range(n+1)] prime_numbers=[] p = 2 while(p * p <= n): # If prime[p] is not changed, then it is # a prime. if (prime[p] == True): # Update all multiples of p for i in range(p * p, n + 1, p): prime[i] = False p += 1 # Print all prime numbers for p in range(2, n): if prime[p]: prime_numbers.append(p) return prime_numbers[10000] t0 = time.time() c = SieveOfEratosthenes(110000) print(\"10001st prime number is:\", c) t1 = time.time() print(\"Time required:\", t1 - t0) OUTPUT: 10001st prime number is: 104743 Time required: 0.021940946578979492","title":"10001st Prime"},{"location":"problem-007/#10001st-prime","text":"package main import ( \"fmt\" \"math/big\" ) func firstNPrime(n int) int { var nPrime int = 0 for i := 2; n != 0; i++ { if big.NewInt(int64(i)).ProbablyPrime(0) { nPrime = i n-- } } return nPrime } func main() { fmt.Println(firstNPrime(10001)) } OUTPUT 104743","title":"10001st Prime"},{"location":"problem-007/#python-solutions-by-yogisam72","text":"","title":"Python Solutions by Yogisam72"},{"location":"problem-007/#solution-1","text":"import time prime = [2] index = 10001 prime_numbers_array_length = 1 t0 = time.time() i = 3 while prime_numbers_array_length != index: flag = 1 for j in prime[:round(prime_numbers_array_length**0.5)]: if i%j == 0: flag = 0 break if flag == 1: prime.append(i) prime_numbers_array_length = len(prime) i += 2 print(\"10001st prime number is:\",prime[-1]) t1 = time.time() print(\"Time required:\", t1 - t0) OUTPUT 10001st prime number is: 104743 Time required: 0.1237955093383789","title":"Solution 1"},{"location":"problem-007/#solution-2","text":"import time def SieveOfEratosthenes(n): prime = [True for i in range(n+1)] prime_numbers=[] p = 2 while(p * p <= n): # If prime[p] is not changed, then it is # a prime. if (prime[p] == True): # Update all multiples of p for i in range(p * p, n + 1, p): prime[i] = False p += 1 # Print all prime numbers for p in range(2, n): if prime[p]: prime_numbers.append(p) return prime_numbers[10000] t0 = time.time() c = SieveOfEratosthenes(110000) print(\"10001st prime number is:\", c) t1 = time.time() print(\"Time required:\", t1 - t0) OUTPUT: 10001st prime number is: 104743 Time required: 0.021940946578979492","title":"Solution 2"},{"location":"problem-008/","text":"Largest Product In A Series # Python Solution # def calculate_product(part_of_num_string): product = 1 for i in range(len(part_of_num_string) - 1): product *= int(part_of_num_string[i]) return product def solution(): input_string = \"\"\"73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450\"\"\" products = [] num_string = input_string.replace(\"\\n\", \"\") for i in range(len(num_string) - 14): product = calculate_product(num_string[i:i + 14]) products.append(product) return max(products) Haskell Solution # calc :: String -> Int calc x = foldl (*) 1 $ map (\\x -> read [x] :: Int) x slice :: [a] -> Int -> Int -> [a] slice x l t = take t $ drop l x main = do let x = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\" n = length x t = 5 print $ maximum [calc $ slice x i t | i <- [0 .. n - t - 1]] print $ calc \"1335\" OUTPUT 23514624000","title":"Largest Product In A Series"},{"location":"problem-008/#largest-product-in-a-series","text":"","title":"Largest Product In A Series"},{"location":"problem-008/#python-solution","text":"def calculate_product(part_of_num_string): product = 1 for i in range(len(part_of_num_string) - 1): product *= int(part_of_num_string[i]) return product def solution(): input_string = \"\"\"73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450\"\"\" products = [] num_string = input_string.replace(\"\\n\", \"\") for i in range(len(num_string) - 14): product = calculate_product(num_string[i:i + 14]) products.append(product) return max(products)","title":"Python Solution"},{"location":"problem-008/#haskell-solution","text":"calc :: String -> Int calc x = foldl (*) 1 $ map (\\x -> read [x] :: Int) x slice :: [a] -> Int -> Int -> [a] slice x l t = take t $ drop l x main = do let x = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\" n = length x t = 5 print $ maximum [calc $ slice x i t | i <- [0 .. n - t - 1]] print $ calc \"1335\" OUTPUT 23514624000","title":"Haskell Solution"},{"location":"problem-009/","text":"Special Pythagorean triplet # triplets l = [[a,b,c] | m <- [2..limit], n <- [1..(m-1)], let a = m^2 - n^2, let b = 2*m*n, let c = m^2 + n^2, a+b+c==l] where limit = floor . sqrt . fromIntegral $ l problem_9 = product . head . triplets $ 1000 OUTPUT 31875000","title":"Special Pythagorean triplet"},{"location":"problem-009/#special-pythagorean-triplet","text":"triplets l = [[a,b,c] | m <- [2..limit], n <- [1..(m-1)], let a = m^2 - n^2, let b = 2*m*n, let c = m^2 + n^2, a+b+c==l] where limit = floor . sqrt . fromIntegral $ l problem_9 = product . head . triplets $ 1000 OUTPUT 31875000","title":"Special Pythagorean triplet"},{"location":"problem-010/","text":"Largest Product In A Series # primes = 2 : filter (null . tail . primeFactors) [3,5..] primeFactors n = factor n primes where factor n (p:ps) | p*p > n = [n] | n `mod` p == 0 = p : factor (n `div` p) (p:ps) | otherwise = factor n ps problem_10 = sum $ takeWhile (<2000000) primes OUTPUT 142913828922","title":"Largest Product In A Series"},{"location":"problem-010/#largest-product-in-a-series","text":"primes = 2 : filter (null . tail . primeFactors) [3,5..] primeFactors n = factor n primes where factor n (p:ps) | p*p > n = [n] | n `mod` p == 0 = p : factor (n `div` p) (p:ps) | otherwise = factor n ps problem_10 = sum $ takeWhile (<2000000) primes OUTPUT 142913828922","title":"Largest Product In A Series"},{"location":"problem-011/","text":"Largest Product In A Grid # def calculate_right(row_list, row, index): if index > 16: return 0 result = 1 for i in range(4): result *= row_list[row][index+i] return result def calculate_down(row_list, row, index): if row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index] return result def calculate_diag_right(row_list, row, index): if index > 16 or row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index+i] return result def calculate_diag_left(row_list, row, index): if index < 3 or row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index-i] return result def calculate_max_of_current_number(row_list, row, index): right = calculate_right(row_list, row, index) down = calculate_down(row_list, row, index) diag_right = calculate_diag_right(row_list, row, index) diag_left = calculate_diag_left(row_list, row, index) return max(right, down, diag_right, diag_left) def solution(): input_str = \"\"\"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\"\"\" lines_str = input_str.split(\"\\n\") rows = [] for i in range(len(lines_str)): numbers_of_row = list(map(int, lines_str[i].split(\" \"))) rows.append(numbers_of_row) products = [] for i in range(20): for j in range(20): products.append(calculate_max_of_current_number(rows, i, j)) return max(products) OUTPUT 70600674","title":"Largest Product In A Grid"},{"location":"problem-011/#largest-product-in-a-grid","text":"def calculate_right(row_list, row, index): if index > 16: return 0 result = 1 for i in range(4): result *= row_list[row][index+i] return result def calculate_down(row_list, row, index): if row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index] return result def calculate_diag_right(row_list, row, index): if index > 16 or row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index+i] return result def calculate_diag_left(row_list, row, index): if index < 3 or row > 16: return 0 result = 1 for i in range(4): result *= row_list[row+i][index-i] return result def calculate_max_of_current_number(row_list, row, index): right = calculate_right(row_list, row, index) down = calculate_down(row_list, row, index) diag_right = calculate_diag_right(row_list, row, index) diag_left = calculate_diag_left(row_list, row, index) return max(right, down, diag_right, diag_left) def solution(): input_str = \"\"\"08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\"\"\" lines_str = input_str.split(\"\\n\") rows = [] for i in range(len(lines_str)): numbers_of_row = list(map(int, lines_str[i].split(\" \"))) rows.append(numbers_of_row) products = [] for i in range(20): for j in range(20): products.append(calculate_max_of_current_number(rows, i, j)) return max(products) OUTPUT 70600674","title":"Largest Product In A Grid"},{"location":"problem-012/","text":"Largest Product In A Series # import Data.List triangleNumber = scanl1 (+) [1..] divisors n = [ d | d <- [1..(n `div` 2)], n `mod` d == 0] numDivs = length . divisors problem-012 = fund ((>500) . numDivs) triangleNumber OUTPUT 76576500","title":"Largest Product In A Series"},{"location":"problem-012/#largest-product-in-a-series","text":"import Data.List triangleNumber = scanl1 (+) [1..] divisors n = [ d | d <- [1..(n `div` 2)], n `mod` d == 0] numDivs = length . divisors problem-012 = fund ((>500) . numDivs) triangleNumber OUTPUT 76576500","title":"Largest Product In A Series"},{"location":"problem-013/","text":"Large sum # inp = \"\"\" 37107287533902102798797998220837590246510135740250 46376937677490009712648124896970078050417018260538 74324986199524741059474233309513058123726617309629 91942213363574161572522430563301811072406154908250 23067588207539346171171980310421047513778063246676 89261670696623633820136378418383684178734361726757 28112879812849979408065481931592621691275889832738 44274228917432520321923589422876796487670272189318 47451445736001306439091167216856844588711603153276 70386486105843025439939619828917593665686757934951 62176457141856560629502157223196586755079324193331 64906352462741904929101432445813822663347944758178 92575867718337217661963751590579239728245598838407 58203565325359399008402633568948830189458628227828 80181199384826282014278194139940567587151170094390 35398664372827112653829987240784473053190104293586 86515506006295864861532075273371959191420517255829 71693888707715466499115593487603532921714970056938 54370070576826684624621495650076471787294438377604 53282654108756828443191190634694037855217779295145 36123272525000296071075082563815656710885258350721 45876576172410976447339110607218265236877223636045 17423706905851860660448207621209813287860733969412 81142660418086830619328460811191061556940512689692 51934325451728388641918047049293215058642563049483 62467221648435076201727918039944693004732956340691 15732444386908125794514089057706229429197107928209 55037687525678773091862540744969844508330393682126 18336384825330154686196124348767681297534375946515 80386287592878490201521685554828717201219257766954 78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 \"\"\" #include <bits/stdc++.h> using namespace std; string add (string a, string &b) { // make sure string 'a' is never greater than 'b' if (a.size() > b.size()) swap(a, b); string str = \"\"; // calculate length of both string int n1 = a.size(), n2 = b.size(); // Reverse both of strings reverse(a.begin(), a.end()); reverse(b.begin(), b.end()); int carry = 0; for (int i = 0; i < n1; ++i) { int num1 = a[i] - '0'; int num2 = b[i] - '0'; int sum = num1 + num2 + carry; char ch = (sum % 10 + '0'); str += ch; carry = sum/10; } // Add remaining digits of larger number for (int i = n1; i < n2; ++i) { int num = b[i] - '0'; int sum = num + carry; char ch = sum%10 + '0'; str += ch; carry = sum/10; } // Add remaining carry if any if (carry) str.push_back(carry+'0'); // reverse resultant string reverse(str.begin(), str.end()); return str; } int main () { // storing input in string since input is large string a; cin >> a; for (int i = 0; i < 99; ++i) { string b; cin >> b; a = add (a, b); } for (int i = 0; i < 10; ++i) cout << a[i]; cout << endl; return 0; } OUTPUT 5537376230","title":"Large sum"},{"location":"problem-013/#large-sum","text":"inp = \"\"\" 37107287533902102798797998220837590246510135740250 46376937677490009712648124896970078050417018260538 74324986199524741059474233309513058123726617309629 91942213363574161572522430563301811072406154908250 23067588207539346171171980310421047513778063246676 89261670696623633820136378418383684178734361726757 28112879812849979408065481931592621691275889832738 44274228917432520321923589422876796487670272189318 47451445736001306439091167216856844588711603153276 70386486105843025439939619828917593665686757934951 62176457141856560629502157223196586755079324193331 64906352462741904929101432445813822663347944758178 92575867718337217661963751590579239728245598838407 58203565325359399008402633568948830189458628227828 80181199384826282014278194139940567587151170094390 35398664372827112653829987240784473053190104293586 86515506006295864861532075273371959191420517255829 71693888707715466499115593487603532921714970056938 54370070576826684624621495650076471787294438377604 53282654108756828443191190634694037855217779295145 36123272525000296071075082563815656710885258350721 45876576172410976447339110607218265236877223636045 17423706905851860660448207621209813287860733969412 81142660418086830619328460811191061556940512689692 51934325451728388641918047049293215058642563049483 62467221648435076201727918039944693004732956340691 15732444386908125794514089057706229429197107928209 55037687525678773091862540744969844508330393682126 18336384825330154686196124348767681297534375946515 80386287592878490201521685554828717201219257766954 78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690 \"\"\" #include <bits/stdc++.h> using namespace std; string add (string a, string &b) { // make sure string 'a' is never greater than 'b' if (a.size() > b.size()) swap(a, b); string str = \"\"; // calculate length of both string int n1 = a.size(), n2 = b.size(); // Reverse both of strings reverse(a.begin(), a.end()); reverse(b.begin(), b.end()); int carry = 0; for (int i = 0; i < n1; ++i) { int num1 = a[i] - '0'; int num2 = b[i] - '0'; int sum = num1 + num2 + carry; char ch = (sum % 10 + '0'); str += ch; carry = sum/10; } // Add remaining digits of larger number for (int i = n1; i < n2; ++i) { int num = b[i] - '0'; int sum = num + carry; char ch = sum%10 + '0'; str += ch; carry = sum/10; } // Add remaining carry if any if (carry) str.push_back(carry+'0'); // reverse resultant string reverse(str.begin(), str.end()); return str; } int main () { // storing input in string since input is large string a; cin >> a; for (int i = 0; i < 99; ++i) { string b; cin >> b; a = add (a, b); } for (int i = 0; i < 10; ++i) cout << a[i]; cout << endl; return 0; } OUTPUT 5537376230","title":"Large sum"},{"location":"problem-014/","text":"Longest Collatz sequence # Go Solution # package main import \"fmt\" type longestCollatzSequenceStruct struct { start int total int } func collatz(number int) int { if number%2 == 0 { return number / 2 } return number*3 + 1 } func collatzSequence(start int) []int { var sequence []int sequence = append(sequence, start) for start != 1 { start = collatz(start) sequence = append(sequence, start) } return sequence } func longestCollatzSequence(limit int) { var longest longestCollatzSequenceStruct for i := 1; i <= limit; i++ { sequenceTemp := collatzSequence(i) sequenceLengthTemp := len(sequenceTemp) if longest.total < sequenceLengthTemp { longest.start = i longest.total = sequenceLengthTemp } } fmt.Println(longest.start) } func main() { longestCollatzSequence(1000000) } OUTPUT 837799","title":"Longest Collatz sequence"},{"location":"problem-014/#longest-collatz-sequence","text":"","title":"Longest Collatz sequence"},{"location":"problem-014/#go-solution","text":"package main import \"fmt\" type longestCollatzSequenceStruct struct { start int total int } func collatz(number int) int { if number%2 == 0 { return number / 2 } return number*3 + 1 } func collatzSequence(start int) []int { var sequence []int sequence = append(sequence, start) for start != 1 { start = collatz(start) sequence = append(sequence, start) } return sequence } func longestCollatzSequence(limit int) { var longest longestCollatzSequenceStruct for i := 1; i <= limit; i++ { sequenceTemp := collatzSequence(i) sequenceLengthTemp := len(sequenceTemp) if longest.total < sequenceLengthTemp { longest.start = i longest.total = sequenceLengthTemp } } fmt.Println(longest.start) } func main() { longestCollatzSequence(1000000) } OUTPUT 837799","title":"Go Solution"},{"location":"problem-015/","text":"Lattice Paths # Starting in the top left corner of a n\u00d7m grid, and only being able to move to the right and down, all the paths are a series of down(D) and right(R) eg. 2*2 grid the 6 paths are: 1) DDRR 2) DRDR 3) DRRD 4) RDRD 5) RDDR 6) RRDD so for a n*m grid the paths are the number of ways in which n - D's and m - R's can permute from math import factorial # grid dimensions n*m n = 20 m = 20 number_of_paths = factorial(n+m) / ( factorial(n) * factorial(m) ) print(number_of_paths) OUTPUT 137846528820","title":"Lattice Paths"},{"location":"problem-015/#lattice-paths","text":"Starting in the top left corner of a n\u00d7m grid, and only being able to move to the right and down, all the paths are a series of down(D) and right(R) eg. 2*2 grid the 6 paths are: 1) DDRR 2) DRDR 3) DRRD 4) RDRD 5) RDDR 6) RRDD so for a n*m grid the paths are the number of ways in which n - D's and m - R's can permute from math import factorial # grid dimensions n*m n = 20 m = 20 number_of_paths = factorial(n+m) / ( factorial(n) * factorial(m) ) print(number_of_paths) OUTPUT 137846528820","title":"Lattice Paths"},{"location":"problem-016/","text":"Power Digit Sum # digit_sum = 0 for i in str(2**1000): digit_sum+=int(i) print(digit_sum) OUTPUT 1366","title":"Power Digit Sum"},{"location":"problem-016/#power-digit-sum","text":"digit_sum = 0 for i in str(2**1000): digit_sum+=int(i) print(digit_sum) OUTPUT 1366","title":"Power Digit Sum"},{"location":"problem-017/","text":"Number letter counts # package main import ( \"fmt\" \"strings\" ) func spelling(number int) string { under20 := []string{\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"} tens := []string{\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"} if number == 0 { return \"\" } if number < 20 { return under20[number-1] } if number < 100 { return tens[number/10-2] + \" \" + spelling(number%10) } if number < 1000 { if number%100 == 0 { return under20[number/100-1] + \" hundred \" } return under20[number/100-1] + \" hundred and \" + spelling(number%100) } if number == 1000 { return under20[number/1000-1] + \" thousand\" } return \"\" } func letterCounts(limit int) int { total := 0 for i := 1; i <= limit; i++ { str := spelling(i) total += len(strings.ReplaceAll(str, \" \", \"\")) } return total } func main() { fmt.Println(letterCounts(1000)) } OUTPUT 21124","title":"Number letter counts"},{"location":"problem-017/#number-letter-counts","text":"package main import ( \"fmt\" \"strings\" ) func spelling(number int) string { under20 := []string{\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"} tens := []string{\"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"} if number == 0 { return \"\" } if number < 20 { return under20[number-1] } if number < 100 { return tens[number/10-2] + \" \" + spelling(number%10) } if number < 1000 { if number%100 == 0 { return under20[number/100-1] + \" hundred \" } return under20[number/100-1] + \" hundred and \" + spelling(number%100) } if number == 1000 { return under20[number/1000-1] + \" thousand\" } return \"\" } func letterCounts(limit int) int { total := 0 for i := 1; i <= limit; i++ { str := spelling(i) total += len(strings.ReplaceAll(str, \" \", \"\")) } return total } func main() { fmt.Println(letterCounts(1000)) } OUTPUT 21124","title":"Number letter counts"},{"location":"problem-018/","text":"Maximum Path Sum I # tri = \"\"\" 75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 \"\"\" myarr = [list(x.split()) for x in tri.strip().split('\\n')] possible_paths = [] max_len = len(myarr) def path_func(st, i, j, length): st.append(myarr[i][j]) if (length == max_len): possible_paths.append([int(x) for x in st]) # left recurse if (i+1 < max_len): path_func(st, i+1, j, length + 1) # right recurse if (i+1 < max_len and j < len(myarr[i+1])): path_func(st, i+1, j+1, length + 1) st.pop() path_func([], 0, 0, 1) max(list(map(lambda x: sum(x), possible_paths))) OUTPUT 1074","title":"Maximum Path Sum I"},{"location":"problem-018/#maximum-path-sum-i","text":"tri = \"\"\" 75 95 64 17 47 82 18 35 87 10 20 04 82 47 65 19 01 23 75 03 34 88 02 77 73 07 63 67 99 65 04 28 06 16 70 92 41 41 26 56 83 40 80 70 33 41 48 72 33 47 32 37 16 94 29 53 71 44 65 25 43 91 52 97 51 14 70 11 33 28 77 73 17 78 39 68 17 57 91 71 52 38 17 14 91 43 58 50 27 29 48 63 66 04 68 89 53 67 30 73 16 69 87 40 31 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23 \"\"\" myarr = [list(x.split()) for x in tri.strip().split('\\n')] possible_paths = [] max_len = len(myarr) def path_func(st, i, j, length): st.append(myarr[i][j]) if (length == max_len): possible_paths.append([int(x) for x in st]) # left recurse if (i+1 < max_len): path_func(st, i+1, j, length + 1) # right recurse if (i+1 < max_len and j < len(myarr[i+1])): path_func(st, i+1, j+1, length + 1) st.pop() path_func([], 0, 0, 1) max(list(map(lambda x: sum(x), possible_paths))) OUTPUT 1074","title":"Maximum Path Sum I"},{"location":"problem-020/","text":"Factorial Digit Sum # num = 100 prod = 1 for i in range(1, num+1): prod = prod * i sum([int(x) for x in list(str(prod))]) OUTPUT 648","title":"Factorial Digit Sum"},{"location":"problem-020/#factorial-digit-sum","text":"num = 100 prod = 1 for i in range(1, num+1): prod = prod * i sum([int(x) for x in list(str(prod))]) OUTPUT 648","title":"Factorial Digit Sum"},{"location":"problem-022/","text":"Names Scores # // Using [names.txt], a 46K text file containing over five-thousand first // names, begin by sorting it into alphabetical order. Then working out the // alphabetical value for each name, multiply this value by its alphabetical // position in the list to obtain a name score. // For example, when the list is sorted into alphabetical order, COLIN, which is // worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN // would obtain a score of 938 \u00d7 53 = 49714. // What is the total of all the name scores in the file? function calculateNameScores(names) { var score = 0, len = names.length; while (len--) { score += (len+1) * wordValue(names[len]); } return score; } function wordValue(word) { var alphabet = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'; var value = 0, length = word.length; while (length--) { value += alphabet.indexOf(word[length]); } return value; } var fs = require('fs');//Node fs.readFile('names.txt', { encoding: 'UTF-8' }, function(err, data){ var names = data.replace(/\"/g, '').split(','); names.sort(); console.log( calculateNameScores(names) ); }); OUTPUT 871198282","title":"Names Scores"},{"location":"problem-022/#names-scores","text":"// Using [names.txt], a 46K text file containing over five-thousand first // names, begin by sorting it into alphabetical order. Then working out the // alphabetical value for each name, multiply this value by its alphabetical // position in the list to obtain a name score. // For example, when the list is sorted into alphabetical order, COLIN, which is // worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN // would obtain a score of 938 \u00d7 53 = 49714. // What is the total of all the name scores in the file? function calculateNameScores(names) { var score = 0, len = names.length; while (len--) { score += (len+1) * wordValue(names[len]); } return score; } function wordValue(word) { var alphabet = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ'; var value = 0, length = word.length; while (length--) { value += alphabet.indexOf(word[length]); } return value; } var fs = require('fs');//Node fs.readFile('names.txt', { encoding: 'UTF-8' }, function(err, data){ var names = data.replace(/\"/g, '').split(','); names.sort(); console.log( calculateNameScores(names) ); }); OUTPUT 871198282","title":"Names Scores"},{"location":"problem-023/","text":"Non-Abundant Numbers # abun = [] for i in range(1, 28123): factors = [] for k in range(1, i//2+1): if i % k == 0: factors.append(k) if (sum(factors) > i): #print(i, factors) abun.append(i) combinations = [] for num1 in abun: for num2 in abun: if num1+num2 <= 28123: combinations.append(num1+num2) ab_com = set(combinations) sum(set(range(1, 28123+1)) - ab_com) OUTPUT 4179871","title":"Non-Abundant Numbers"},{"location":"problem-023/#non-abundant-numbers","text":"abun = [] for i in range(1, 28123): factors = [] for k in range(1, i//2+1): if i % k == 0: factors.append(k) if (sum(factors) > i): #print(i, factors) abun.append(i) combinations = [] for num1 in abun: for num2 in abun: if num1+num2 <= 28123: combinations.append(num1+num2) ab_com = set(combinations) sum(set(range(1, 28123+1)) - ab_com) OUTPUT 4179871","title":"Non-Abundant Numbers"},{"location":"problem-025/","text":"1000-digit Fibonacci number # a = 0 b = 1 idx = 1 while True: if (len(str(b))>= 1000): print(f'idx = {idx}, b = {b}, len = {len(str(b))}') break a, b = b, a + b idx += 1 OUTPUT idx = 4782, b = 1070066266382758936764980584457396885083683896632151665013235203375314520604694040621889147582489792657804694888177591957484336466672569959512996030461262748092482186144069433051234774442750273781753087579391666192149259186759553966422837148943113074699503439547001985432609723067290192870526447243726117715821825548491120525013201478612965931381792235559657452039506137551467837543229119602129934048260706175397706847068202895486902666185435124521900369480641357447470911707619766945691070098024393439617474103736912503231365532164773697023167755051595173518460579954919410967778373229665796581646513903488154256310184224190259846088000110186255550245493937113651657039447629584714548523425950428582425306083544435428212611008992863795048006894330309773217834864543113205765659868456288616808718693835297350643986297640660000723562917905207051164077614812491885830945940566688339109350944456576357666151619317753792891661581327159616877487983821820492520348473874384736771934512787029218636250627816, len = 1000","title":"1000-digit Fibonacci number"},{"location":"problem-025/#1000-digit-fibonacci-number","text":"a = 0 b = 1 idx = 1 while True: if (len(str(b))>= 1000): print(f'idx = {idx}, b = {b}, len = {len(str(b))}') break a, b = b, a + b idx += 1 OUTPUT idx = 4782, b = 1070066266382758936764980584457396885083683896632151665013235203375314520604694040621889147582489792657804694888177591957484336466672569959512996030461262748092482186144069433051234774442750273781753087579391666192149259186759553966422837148943113074699503439547001985432609723067290192870526447243726117715821825548491120525013201478612965931381792235559657452039506137551467837543229119602129934048260706175397706847068202895486902666185435124521900369480641357447470911707619766945691070098024393439617474103736912503231365532164773697023167755051595173518460579954919410967778373229665796581646513903488154256310184224190259846088000110186255550245493937113651657039447629584714548523425950428582425306083544435428212611008992863795048006894330309773217834864543113205765659868456288616808718693835297350643986297640660000723562917905207051164077614812491885830945940566688339109350944456576357666151619317753792891661581327159616877487983821820492520348473874384736771934512787029218636250627816, len = 1000","title":"1000-digit Fibonacci number"},{"location":"problem-026/","text":"Reciprocal cycles # num = 1 longest_cycle = 1 for n in range(3, 1000, 2): if n % 5 == 0: continue cycle_length = 1 while (10 ** cycle_length) % n != 1: cycle_length += 1 if cycle_length > longest_cycle: num, longest_cycle = n, cycle_length print(num) OUTPUT 983","title":"Reciprocal cycles"},{"location":"problem-026/#reciprocal-cycles","text":"num = 1 longest_cycle = 1 for n in range(3, 1000, 2): if n % 5 == 0: continue cycle_length = 1 while (10 ** cycle_length) % n != 1: cycle_length += 1 if cycle_length > longest_cycle: num, longest_cycle = n, cycle_length print(num) OUTPUT 983","title":"Reciprocal cycles"},{"location":"problem-028/","text":"Number spiral diagonals # diagonal 1 : 1,3,7,13,21,31,43... has a common difference of - 2,4,6,8,10,... diagonal 2: 1,5,9,17,25,37,49,... has a common difference of - 4,4,8,8,12,12,16... total_sum = 1 num = 1 num2 = 1 diagonal1 = 2 diagonal2 = 4 for i in range(1000): num += diagonal1 num2+= diagonal2 total_sum+= num + num2 diagonal1 +=2 if i%2!=0 and i: diagonal2+=4 print(total_sum) OUTPUT 669171001","title":"Number spiral diagonals"},{"location":"problem-028/#number-spiral-diagonals","text":"diagonal 1 : 1,3,7,13,21,31,43... has a common difference of - 2,4,6,8,10,... diagonal 2: 1,5,9,17,25,37,49,... has a common difference of - 4,4,8,8,12,12,16... total_sum = 1 num = 1 num2 = 1 diagonal1 = 2 diagonal2 = 4 for i in range(1000): num += diagonal1 num2+= diagonal2 total_sum+= num + num2 diagonal1 +=2 if i%2!=0 and i: diagonal2+=4 print(total_sum) OUTPUT 669171001","title":"Number spiral diagonals"},{"location":"problem-029/","text":"Distinct Powers # print (len(set(a ** b for a in range(2, 101) for b in range(2, 101)))) OUTPUT 9183","title":"Distinct Powers"},{"location":"problem-029/#distinct-powers","text":"print (len(set(a ** b for a in range(2, 101) for b in range(2, 101)))) OUTPUT 9183","title":"Distinct Powers"},{"location":"problem-031/","text":"Coins Sum # coins = [1, 2, 5, 10, 20, 50, 100, 200] target = 200 dp = [[1] + [0]*target for i in range(len(coins)+1)] for i in range(1, len(dp)): for j in range(1, target+1): dp[i][j] += dp[i-1][j] if (j-coins[i-1] >= 0): dp[i][j] += dp[i][j-coins[i-1]] dp[len(coins)][target] OUTPUT 73682 Recursive solution coins = [1, 2, 5, 10, 20, 50, 100, 200] def count_ways(coins, coins_available, target_amt): if target_amt == 0: return 1 if target_amt < 0 or coins_available <= 0: return 0 # either don't use the coin, the target_amt remains same # or use the coin, so the target_amt reduces by coin amount return count_ways(coins, coins_available-1, target_amt) + count_ways(coins, coins_available, target_amt - coins[coins_available-1]) count_ways(coins, len(coins), 200)","title":"Coins Sum"},{"location":"problem-031/#coins-sum","text":"coins = [1, 2, 5, 10, 20, 50, 100, 200] target = 200 dp = [[1] + [0]*target for i in range(len(coins)+1)] for i in range(1, len(dp)): for j in range(1, target+1): dp[i][j] += dp[i-1][j] if (j-coins[i-1] >= 0): dp[i][j] += dp[i][j-coins[i-1]] dp[len(coins)][target] OUTPUT 73682 Recursive solution coins = [1, 2, 5, 10, 20, 50, 100, 200] def count_ways(coins, coins_available, target_amt): if target_amt == 0: return 1 if target_amt < 0 or coins_available <= 0: return 0 # either don't use the coin, the target_amt remains same # or use the coin, so the target_amt reduces by coin amount return count_ways(coins, coins_available-1, target_amt) + count_ways(coins, coins_available, target_amt - coins[coins_available-1]) count_ways(coins, len(coins), 200)","title":"Coins Sum"},{"location":"problem-034/","text":"Digit Factorials # from functools import reduce facts = [1] + [reduce(lambda x, y: x * y, range(1, i+1)) for i in range(1, 10)] curi_num = lambda num: sum(map(lambda x: facts[int(x)], list(str(num)))) == num curi_nums = [i for i in range(1000000) if curi_num(i)] sum(set(curi_nums) - {1, 2}) OUTPUT 40730","title":"Digit Factorials"},{"location":"problem-034/#digit-factorials","text":"from functools import reduce facts = [1] + [reduce(lambda x, y: x * y, range(1, i+1)) for i in range(1, 10)] curi_num = lambda num: sum(map(lambda x: facts[int(x)], list(str(num)))) == num curi_nums = [i for i in range(1000000) if curi_num(i)] sum(set(curi_nums) - {1, 2}) OUTPUT 40730","title":"Digit Factorials"},{"location":"problem-038/","text":"Pandigital Multiples # from functools import reduce def concat_prod(x, l): return reduce(lambda x, y: x + y, [str(num * x) for num in l]) digitset = {'1', '2', '3', '4', '5', '6', '7', '8', '9'} pandigitalnums = [(int(concat_prod(x, l)), x) for x in range(9000, 9999) if set(concat_prod(x, l)) == digitset] pandigitalnums OUTPUT [(926718534, 9267), (927318546, 9273), (932718654, 9327)] 932718654","title":"Pandigital Multiples"},{"location":"problem-038/#pandigital-multiples","text":"from functools import reduce def concat_prod(x, l): return reduce(lambda x, y: x + y, [str(num * x) for num in l]) digitset = {'1', '2', '3', '4', '5', '6', '7', '8', '9'} pandigitalnums = [(int(concat_prod(x, l)), x) for x in range(9000, 9999) if set(concat_prod(x, l)) == digitset] pandigitalnums OUTPUT [(926718534, 9267), (927318546, 9273), (932718654, 9327)] 932718654","title":"Pandigital Multiples"},{"location":"problem-048/","text":"Self Powers # We need to find the last 10 digits of a sum that i given by 1^1 + 2^2 + 3^3 + ... uptp 1000^1000 the num%10000000000 gives us remainder after dividing by 10000000000 which is the required answer num = 0 for i in range(1,1001): num = num + i**i print(num%10000000000) Output 9110846700","title":"Self Powers"},{"location":"problem-048/#self-powers","text":"We need to find the last 10 digits of a sum that i given by 1^1 + 2^2 + 3^3 + ... uptp 1000^1000 the num%10000000000 gives us remainder after dividing by 10000000000 which is the required answer num = 0 for i in range(1,1001): num = num + i**i print(num%10000000000) Output 9110846700","title":"Self Powers"},{"location":"problem-057/","text":"Square Root Convergents # Haskell Solution # import Data.Ratio main = do let f x = let a = numerator x b = denominator x in (a + b * 2) % (a + b) print $ length $ filter (\\x -> (length $ show $ numerator x) - (length $ show $ denominator x) == 1) $ take 1000 $ iterate f (3 % 2) OUTPUT 153","title":"Square Root Convergents"},{"location":"problem-057/#square-root-convergents","text":"","title":"Square Root Convergents"},{"location":"problem-057/#haskell-solution","text":"import Data.Ratio main = do let f x = let a = numerator x b = denominator x in (a + b * 2) % (a + b) print $ length $ filter (\\x -> (length $ show $ numerator x) - (length $ show $ denominator x) == 1) $ take 1000 $ iterate f (3 % 2) OUTPUT 153","title":"Haskell Solution"},{"location":"problem-079/","text":"Passcode derivation # Python Solution # import os from itertools import * from collections import defaultdict def main(): attempts = [line.strip() for line in open(os.path.join(os.path.dirname(__file__), 'p079_keylog.txt')).readlines()] appearances = defaultdict(list) for attempt in attempts: for i, n in enumerate(attempt): appearances[n].append(i) average_positions = {} for k,v in list(appearances.items()): average_positions[k] = float(sum(v))/float(len(v)) a = [k for k,v in sorted(list(average_positions.items()), key=lambda a: a[1])] print(''.join(str(x) for x in a)) if __name__ == '__main__': main() OUTPUT 73162890","title":"Passcode derivation"},{"location":"problem-079/#passcode-derivation","text":"","title":"Passcode derivation"},{"location":"problem-079/#python-solution","text":"import os from itertools import * from collections import defaultdict def main(): attempts = [line.strip() for line in open(os.path.join(os.path.dirname(__file__), 'p079_keylog.txt')).readlines()] appearances = defaultdict(list) for attempt in attempts: for i, n in enumerate(attempt): appearances[n].append(i) average_positions = {} for k,v in list(appearances.items()): average_positions[k] = float(sum(v))/float(len(v)) a = [k for k,v in sorted(list(average_positions.items()), key=lambda a: a[1])] print(''.join(str(x) for x in a)) if __name__ == '__main__': main() OUTPUT 73162890","title":"Python Solution"},{"location":"problem-080/","text":"Path Sum: Two Ways # Sage Math Solution # ans = 0 for i in [1 .. 100] : a = n(sqrt(i), digits = 108) if floor(a) == a : continue a = str(a) if len(a) < 100 : continue a = ''.join(a.split('.')) for j in [0 .. 99] : ans += int(a[j]) print ans OUTPUT 40886","title":"Path Sum: Two Ways"},{"location":"problem-080/#path-sum-two-ways","text":"","title":"Path Sum: Two Ways"},{"location":"problem-080/#sage-math-solution","text":"ans = 0 for i in [1 .. 100] : a = n(sqrt(i), digits = 108) if floor(a) == a : continue a = str(a) if len(a) < 100 : continue a = ''.join(a.split('.')) for j in [0 .. 99] : ans += int(a[j]) print ans OUTPUT 40886","title":"Sage Math Solution"},{"location":"problem-081/","text":"Path sum: two ways # import numpy, time t0=time.time() matrix = numpy.loadtxt('matrix.txt',dtype='i' ,delimiter=',') i=0 j=0 summm = matrix[0][0] while i<80-1 and j < 80-1: if matrix[i][j+1] <= matrix[i+1][j]: j+=1 summm += matrix[i][j] else: i+=1 summm += matrix[i][j] t1=time.time() print(\"Minimal path sum:\",summm,\"\\nTime taken :\" ,t1-t0) OUTPUT: Minimal path sum: 506297 Time taken : 0.004987478256225586","title":"Path sum: two ways"},{"location":"problem-081/#path-sum-two-ways","text":"import numpy, time t0=time.time() matrix = numpy.loadtxt('matrix.txt',dtype='i' ,delimiter=',') i=0 j=0 summm = matrix[0][0] while i<80-1 and j < 80-1: if matrix[i][j+1] <= matrix[i+1][j]: j+=1 summm += matrix[i][j] else: i+=1 summm += matrix[i][j] t1=time.time() print(\"Minimal path sum:\",summm,\"\\nTime taken :\" ,t1-t0) OUTPUT: Minimal path sum: 506297 Time taken : 0.004987478256225586","title":"Path sum: two ways"},{"location":"problem-085/","text":"Counting Rectangles # main = do let f x = x * (x + 1) `div` 2 lmt = 2 * 10^6 print $ minimum [(abs (f x * f y - lmt), x * y) | x <- [1 .. 1000], y <- [1 .. 1000]] OUTPUT 2772","title":"Counting Rectangles"},{"location":"problem-085/#counting-rectangles","text":"main = do let f x = x * (x + 1) `div` 2 lmt = 2 * 10^6 print $ minimum [(abs (f x * f y - lmt), x * y) | x <- [1 .. 1000], y <- [1 .. 1000]] OUTPUT 2772","title":"Counting Rectangles"},{"location":"problem-109/","text":"Darts # limit = 100 result = 0 scores = [] # build all possible single dart scores for i in range(1,21): scores.append(i) scores.append(2 * i) scores.append(3 * i) scores.append(25) scores.append(50) #make all the possible doubles doubles =[] for i in range(1,21): doubles.append(2 * i) doubles.append(25 * 2) #Count all miss, miss, double for third in doubles: if (third < limit): result=result+1 #count all miss, hit, double for i in range(len(scores)): for third in doubles: if scores[i] + third < limit: result=result+1 #count all hit, hit, double for i in range(len(scores)): for j in range(i,len(scores)): for third in doubles: if (scores[i] + scores[j] + third < limit): result=result+1 result OUTPUT 38182","title":"Darts"},{"location":"problem-109/#darts","text":"limit = 100 result = 0 scores = [] # build all possible single dart scores for i in range(1,21): scores.append(i) scores.append(2 * i) scores.append(3 * i) scores.append(25) scores.append(50) #make all the possible doubles doubles =[] for i in range(1,21): doubles.append(2 * i) doubles.append(25 * 2) #Count all miss, miss, double for third in doubles: if (third < limit): result=result+1 #count all miss, hit, double for i in range(len(scores)): for third in doubles: if scores[i] + third < limit: result=result+1 #count all hit, hit, double for i in range(len(scores)): for j in range(i,len(scores)): for third in doubles: if (scores[i] + scores[j] + third < limit): result=result+1 result OUTPUT 38182","title":"Darts"},{"location":"problem-206/","text":"Concealed Square # Python Solution # def match(n): s = str(n) return not all(int(s[x*2]) == x+1 for x in range(9)) n = 138902663 # sqrt(19293949596979899) while match(n*n): n -= 2 print(n*10) OUTPUT 1389019170","title":"Concealed Square"},{"location":"problem-206/#concealed-square","text":"","title":"Concealed Square"},{"location":"problem-206/#python-solution","text":"def match(n): s = str(n) return not all(int(s[x*2]) == x+1 for x in range(9)) n = 138902663 # sqrt(19293949596979899) while match(n*n): n -= 2 print(n*10) OUTPUT 1389019170","title":"Python Solution"}]}